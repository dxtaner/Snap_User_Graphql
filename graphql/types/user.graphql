scalar Date

type Query {
  user(id: ID!): User!
  users: [User!]!
  activeUser: User
}

type Mutation {
  createUser(data: CreateUserInput!): AuthPayload!
  signIn(data: SigninUserInput!): AuthPayload!
  updateUser(id: ID!, data: UpdateUserInput!): User!
  deleteUser(id: ID!): User!
}

type User {
  id: ID!
  username: String!
  email: String!
  createdAt: Date!
  firstName: String
  lastName: String
  phoneNumber: String
  snaps: [Snap!]!
}

type AuthPayload {
  token: String!
  user: User!
}

input CreateUserInput {
  username: String!
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  phoneNumber: String
}

input SigninUserInput {
  username: String!
  password: String!
}

input UpdateUserInput {
  username: String
  email: String
  password: String
  firstName: String
  lastName: String
  phoneNumber: String
}

type Snap {
  id: ID!
  text: String!
  createdAt: Date!
  user: User!
}

type Subscription {
  user: User!
}
